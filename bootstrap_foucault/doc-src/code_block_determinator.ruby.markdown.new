## State machine to determinate lines 


~~~{.ruby}

module Fencing

    FENCE = /^(?<fence>(?<type>~|`){3,}).*$/

    refine String do
    
        def is_fence?
            FENCE.match self
        end

        def fence_size
            FENCE.match(self)[:fence].size
        end

        def fence_type
            FENCE.match(self)[:type]
        end

    end
end

        

class CodeBlockDeterminator

    using Fencing

    def initialize()
        to_start_state
    end

    def collect_line?(line) 

        case @state

        when :fenced_block
            if line.is_fence? and line.fence_size >= @size and line.fence_type == @type then
                 # recognized the end of this code block
                 to_start_state 
            else
                # We're still in a code block: collect this line
                return true
            end            

        when :start
            if line.is_fence?
                # Start of a new code block
                @state = :fenced_block
                @type = line.fence_type
                @size = line.fence_size
            end
        end
        
        # not in a code block: don't collect this line
        return false
    end

    private

    def to_start_state()
        @state = :start
        @size = 0
        @type = :none
    end

end
        
~~~
